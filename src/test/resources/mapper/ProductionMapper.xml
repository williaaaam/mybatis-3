<?xml version="1.0" encoding="UTF-8" ?>
<!--

       Copyright 2009-2022 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="org.apache.ibatis.example.ProductionMapper">
  <!--这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。
  可用的清除策略eviction有：

  LRU – 最近最少使用：移除最长时间不被使用的对象。
  FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
  SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。
  WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。
  默认的清除策略是 LRU
  flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。
  size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。
  readOnly（只读）属
  性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。
  -->
  <!--二级缓存默认是关闭的-->
  <!--mapper中操作的所有SqlSession都共享这个二级缓存-->
  <cache eviction="LRU" flushInterval="60000" size="512" readOnly="true"/>

  <resultMap id="productionResultMap" type="org.apache.ibatis.domain.Production">
    <id property="id" column="id" jdbcType="INTEGER" javaType="java.lang.Integer"/>
    <result property="name" column="name" jdbcType="VARCHAR" javaType="java.lang.String"/>
    <result property="createTime" column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>
    <!--No enum constant org.apache.ibatis.type.JdbcType.DateTime-->
    <!--<result property="updateTime" column="update_time" jdbcType="DateTime" javaType="java.util.Date"/>-->
    <result property="updateTime" column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date"/>

  </resultMap>

  <sql id="base_column">
    ID,NAME,CREATE_TIME,UPDATE_TIME
  </sql>

  <select id="selectOne" resultMap="productionResultMap" useCache="true">
    SELECT
    <include refid="base_column" />
    FROM tb_production
    WHERE ID = #{id}
  </select>

  <select id="selectOneByName" resultMap="productionResultMap">
    SELECT
    <include refid="base_column" />
    FROM
         tb_production
    WHERE
          name = #{product_name,jdbcType=VARCHAR,typeHandler=org.apache.ibatis.example.typehandler.OhMyStringTypeHandler}
    limit 1
  </select>

  <select id="selectOneByIdAndName" resultMap="productionResultMap">
    SELECT
    <include refid="base_column" />
    FROM
    tb_production
    WHERE
        id = #{array[0]}
    AND
        name = #{array[1]}
    limit 1
  </select>

  <!--resultType='int' int是类型别名，可用_int,Integer，java.lang.Integer代替-->
  <select id="countUserWithNullableIsFalse" resultType="int">
    SELECT
           count(*)
    FROM
            tb_production
    <where>
      <foreach item="item" index="index" collection="list" nullable="false" open="id in ("
               separator="," close=")">
        #{item}
      </foreach>
    </where>
  </select>

</mapper>


